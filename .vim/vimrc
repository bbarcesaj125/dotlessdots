" This is my modest Vim Config

" Load all plugins now
" packloadall

" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
" silent! helptags ALL

" Set no-compatible mode
set nocompatible

" Enable enhanced command-line completion
set wildmenu
set wildmode=list:longest,full

" Change the mapleader to ,
let mapleader=" "

" Vimrc quick edit
nmap <silent> <leader>ev :e $MYVIMRC<CR>
nmap <silent> <leader>sv :so $MYVIMRC<CR>

""" Key bindings <
" Tabs keybindings
map  <C-l> :tabn<CR> " Ctrl+L to move to the next tab
map  <C-h> :tabp<CR> " Ctrl+H to move to the previous tab
map  <C-n> :tabnew<CR> " Ctrl+N to create a new tab
" Spell checking
nmap <F5> :setlocal spell! spelllang=en_us<CR> " F5 to toggle spell checking
" Fzf bindings
nmap <Leader>F :GFiles<CR>
nmap <C-p> :Files<CR>
nmap <Leader>b :Buffers<CR>
nmap <Leader>h :History<CR>
nmap <Leader>t :BTags<CR>
nmap <Leader>T :Tags<CR>
nmap <Leader>l :BLines<CR>
nmap <Leader>L :Lines<CR>
nmap <Leader>/ :Rg<Space>
""" Key bindings >

" Some random options
set hidden " Hide buffers instead of closing them
set nowrap        " Don't wrap lines
set tabstop=4     " A tab is four spaces
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set autoindent    " Always set autoindenting on
set copyindent    " Copy the previous indentation on autoindenting
set number relativenumber	" Always show line numbers
set shiftwidth=4  " Number of spaces to use for autoindenting
set showmatch     " Set show matching parenthesis
set history=1000  " Remember more commands
set undolevels=1000 " Remember more undo moves
set title " Change the terminal's title
set nobackup " Self explanatory
set noswapfile " Self explanatory
set autochdir " Set working directory to the current file
set ruler " Activate a permanent ruler

" Searching options
set ignorecase    " Ignore case when searching
set smartcase     " Ignore case if search pattern is all lowercase, case-sensitive otherwise
set nohlsearch    " Auto highlight search terms
set incsearch     " Show search matches as you type

" Enable filetype plugins and indention
filetype on
filetype plugin indent on

" Enable 256 colors support
set t_Co=256

" Disable BCE (Background Color Erase)
if &term =~ '256color'
	set t_ut=
endif

" Enable syntax highlighting
if &t_Co >= 256 || has("gui_running")
	colorscheme molokai
	syntax on
endif

" NERDTree autostart/Toggle
" autocmd vimenter * NERDTree " Disabled
nmap <silent> <F4> :NERDTreeToggle<CR>

" Switch to paste mode
set pastetoggle=<F2>

" Enable PowerLine/Airtime
let g:airline_powerline_fonts = 1
" let g:Powerline_symbols = 'fancy'

" Set statusline
set laststatus=2

" Enable italic comments
highlight Comment cterm=italic

" Plugin settings

""" ALE <
" Set ALE's fixer for JavaScript to Eslint
let g:ale_fixers = {
\   'javascript': ['eslint']
\}

" Fix files automatically on save
let g:ale_fix_on_save = 1

" Disable highlighting
let g:ale_set_highlights = 0

"" Warning settings
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow
""" ALE >

" coc.nvim's specific settings
" Some servers have issues with backup files, see #649
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
